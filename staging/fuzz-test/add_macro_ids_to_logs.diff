diff --git a/fuzzy.py b/fuzzy.py
index 0a1b2c3..9d8e7f6 100644
--- a/fuzzy.py
+++ b/fuzzy.py
@@ -1,6 +1,20 @@
+from wayfire import WayfireSocket
+from random import choice, randint, random, sample
+import threading
+import time
+import logging
+from subprocess import Popen, PIPE, run
+from wayfire.extra.ipc_utils import WayfireUtils
+from wayfire.extra.stipc import Stipc
+
 class TestWayfire:
     def __init__(self):
         self.sock = WayfireSocket()
         self.utils = WayfireUtils(self.sock)
         self.stipc = Stipc(self.sock)
+
+        # Map macro IDs to actions for log parsing / script generation
+        self.macro_map = {
+            "MOVE_CURSOR": "move_cursor",
+            "CLICK_BUTTON": "click_button",
+            "PRESS_KEY": "press_key",
+            "SET_VIEW_MAXIMIZED": "utils.set_view_maximized",
+            "SET_VIEW_FULLSCREEN": "sock.set_view_fullscreen",
+            "SET_VIEW_MINIMIZED": "sock.set_view_minimized",
+            "SET_VIEW_STICKY": "sock.set_view_sticky",
+            "SEND_VIEW_TO_BACK": "sock.send_view_to_back",
+            "SET_VIEW_ALPHA": "sock.set_view_alpha",
+            "SET_VIEW_TOP_LEFT": "utils.set_view_top_left",
+            "SET_VIEW_TOP_RIGHT": "utils.set_view_top_right",
+            "SET_VIEW_BOTTOM_LEFT": "utils.set_view_bottom_left",
+            "SET_VIEW_RIGHT": "utils.set_view_right",
+            "SET_VIEW_LEFT": "utils.set_view_left",
+            "SET_VIEW_BOTTOM": "utils.set_view_bottom",
+            "SET_VIEW_TOP": "utils.set_view_top",
+            "SET_VIEW_CENTER": "utils.set_view_center",
+            "SET_VIEW_BOTTOM_RIGHT": "utils.set_view_bottom_right",
+            "SET_FOCUS": "sock.set_focus",
+            "CUBE_ACTIVATE": "sock.cube_activate",
+            "CUBE_ROTATE_LEFT": "sock.cube_rotate_left",
+            "CUBE_ROTATE_RIGHT": "sock.cube_rotate_right",
+            "TOGGLE_EXPO": "sock.toggle_expo",
+            "SCALE_TOGGLE": "sock.scale_toggle",
+            "TOGGLE_SHOWDESKTOP": "sock.toggle_showdesktop",
+            "CREATE_WAYLAND_OUTPUT": "stipc.create_wayland_output",
+            "DESTROY_WAYLAND_OUTPUT": "stipc.destroy_wayland_output",
+            "RUN_CMD": "stipc.run_cmd",
+            "DELAY_NEXT_TX": "stipc.delay_next_tx",
+            "GO_WORKSPACE_SET_FOCUS": "utils.go_workspace_set_focus",
+            "CONFIGURE_VIEW": "sock.configure_view",
+            "SET_WORKSPACE": "sock.set_workspace",
+        }
+
         # Configure logging
         logging.basicConfig(
             filename="/tmp/wayfire-tests.log",
@@ def test_random_press_key_with_modifiers(self, num_combinations=1):
                 continue

     def test_random_set_view_position(self, view_id):
         if view_id is None:
             view_id = self.test_random_view_id()
         if view_id:
             def set_position(position, view_id=view_id):
-                self.logger.info(f"Setting position: {position}")
+                self.logger.info(f"Setting position: {position} [macro_id=SET_VIEW_{position.upper().replace(' ', '_')}]")
                 if position == "top_left":
                     self.utils.set_view_top_left(view_id)
                 elif position == "top_right":
@@ def test_random_change_view_state(self, view_id):
             if action == "set_view_miminized":
                 self.logger.info(f"set_view_miminized: {view_id}")
                 self.sock.set_view_minimized(view_id, True)
             if action == "set_view_miminized":
                 self.logger.info(f"set_view_minimized: {view_id}")
                 self.sock.set_view_minimized(view_id, False)
             if action == "set_view_sticky":
                 self.logger.info(f"set_view_sticky: {view_id}")
                 self.sock.set_view_sticky(view_id, choice([True, False]))
             if action == "set_view_maximized":
                 self.logger.info(f"send_view_to_back: {view_id}")
                 self.sock.send_view_to_back(view_id, choice([True, False]))
             if action == "set_view_maximized":
                 self.logger.info(f"set_view_alpha: {view_id}")
                 self.sock.set_view_alpha(view_id, random() * 1.0)

     def test_set_view_position(self, view_id):
         if view_id is None:
             view_id = self.test_random_view_id()
         if isinstance(view_id, int):
-            self.logger.info(f"set_view_top_left: {view_id}")
+            self.logger.info(f"set_view_top_left: {view_id} [macro_id=SET_VIEW_TOP_LEFT]")
             self.utils.set_view_top_left(view_id)
-            self.logger.info(f"set_view_top_right: {view_id}")
+            self.logger.info(f"set_view_top_right: {view_id} [macro_id=SET_VIEW_TOP_RIGHT]")
             self.utils.set_view_top_right(view_id)
-            self.logger.info(f"set_view_bottom_left: {view_id}")
+            self.logger.info(f"set_view_bottom_left: {view_id} [macro_id=SET_VIEW_BOTTOM_LEFT]")
             self.utils.set_view_bottom_left(view_id)
-            self.logger.info(f"set_view_right: {view_id}")
+            self.logger.info(f"set_view_right: {view_id} [macro_id=SET_VIEW_RIGHT]")
             self.utils.set_view_right(view_id)
-            self.logger.info(f"set_view_left: {view_id}")
+            self.logger.info(f"set_view_left: {view_id} [macro_id=SET_VIEW_LEFT]")
             self.utils.set_view_left(view_id)
-            self.logger.info(f"set_view_bottom: {view_id}")
+            self.logger.info(f"set_view_bottom: {view_id} [macro_id=SET_VIEW_BOTTOM]")
             self.utils.set_view_bottom(view_id)
-            self.logger.info(f"set_view_top: {view_id}")
+            self.logger.info(f"set_view_top: {view_id} [macro_id=SET_VIEW_TOP]")
             self.utils.set_view_top(view_id)
-            self.logger.info(f"set_view_center: {view_id}")
+            self.logger.info(f"set_view_center: {view_id} [macro_id=SET_VIEW_CENTER]")
             self.utils.set_view_center(view_id)
-            self.logger.info(f"set_view_bottom_right: {view_id}")
+            self.logger.info(f"set_view_bottom_right: {view_id} [macro_id=SET_VIEW_BOTTOM_RIGHT]")
             self.utils.set_view_bottom_right(view_id)
-            self.logger.info(f"set_focus: {view_id}")
+            self.logger.info(f"set_focus: {view_id} [macro_id=SET_FOCUS]")

     def test_move_cursor_and_click(self):
         sumgeo = self.utils._sum_geometry_resolution()
         x, y = randint(100, sumgeo[0]), randint(100, sumgeo[0])
-        self.logger.info(f"move_cursor: {x, y}")
+        self.logger.info(f"move_cursor: {x, y} [macro_id=MOVE_CURSOR]")
         self.stipc.move_cursor(x, y)
-        self.logger.info("click_button: BTN_LEFT full")
+        self.logger.info("click_button: BTN_LEFT full [macro_id=CLICK_BUTTON]")
         self.stipc.click_button("BTN_LEFT", "full")

     def test_cube_plugin(self):
-        self.logger.info("plugin: cube activate")
+        self.logger.info("plugin: cube activate [macro_id=CUBE_ACTIVATE]")
         self.sock.cube_activate()
-        self.logger.info("plugin: cube rotate_left")
+        self.logger.info("plugin: cube rotate_left [macro_id=CUBE_ROTATE_LEFT]")
         self.sock.cube_rotate_left()
-        self.logger.info("plugin: cube rotate_right")
+        self.logger.info("plugin: cube rotate_right [macro_id=CUBE_ROTATE_RIGHT]")
         self.sock.cube_rotate_right()

     def test_plugins(self, plugin=None):
         def plugin_action(action_name):
             if action_name == "expo":
-                self.logger.info("Toggling Expo")
+                self.logger.info("Toggling Expo [macro_id=TOGGLE_EXPO]")
                 self.sock.toggle_expo()
             elif action_name == "scale":
-                self.logger.info("Toggling Scale")
+                self.logger.info("Toggling Scale [macro_id=SCALE_TOGGLE]")
                 self.sock.scale_toggle()
             elif action_name == "showdesktop":
-                self.logger.info("Toggling Show Desktop")
+                self.logger.info("Toggling Show Desktop [macro_id=TOGGLE_SHOWDESKTOP]")
                 self.sock.toggle_showdesktop()
             elif action_name == "cube":
-                self.logger.info("Testing Cube Plugin")
+                self.logger.info("Testing Cube Plugin [macro_id=CUBE_ACTIVATE]")
                 self.test_cube_plugin()
             elif action_name == "switcherview":
-                self.logger.info("Testing Switcher View Plugin")
+                self.logger.info("Testing Switcher View Plugin [macro_id=CLICK_BUTTON]")
                 self.test_toggle_switcher_view_plugin()
             elif action_name == "autorotate":
-                self.logger.info("Testing Auto Rotate Plugin")
+                self.logger.info("Testing Auto Rotate Plugin [macro_id=PRESS_KEY]")
                 self.test_auto_rotate_plugin()
             elif action_name == "invert":
-                self.logger.info("Testing Invert Plugin")
+                self.logger.info("Testing Invert Plugin [macro_id=PRESS_KEY]")
                 self.test_invert_plugin()
             elif action_name == "tile":
-                self.logger.info("Testing Tile Plugin")
+                self.logger.info("Testing Tile Plugin [macro_id=PRESS_KEY]")
                 self.test_toggle_tile_plugin()

     def test_output(self):
-        self.logger.info("create_wayland_output()")
+        self.logger.info("create_wayland_output() [macro_id=CREATE_WAYLAND_OUTPUT]")
         self.stipc.create_wayland_output()
         for output_id in self.utils.list_outputs_ids():
             if output_id in current_outputs:
                 continue
             else:
                 name = self.utils.get_output_name_by_id(output_id)
                 if name:
-                    self.stipc.destroy_wayland_output(name)
+                    self.logger.info(f"destroy_wayland_output {name} [macro_id=DESTROY_WAYLAND_OUTPUT]")

     def test_spam_terminals(self, number_of_views_to_open, wayland_display=None):
         if chosen_terminal:
             for _ in range(number_of_views_to_open):
                 if wayland_display is None:
-                    self.stipc.run_cmd(chosen_terminal)
+                    self.logger.info(f"run_cmd {chosen_terminal} [macro_id=RUN_CMD]")
                 else:
                     command = "export WAYLAND_DISPLAY={0} ; {1}".format(
                         wayland_display, chosen_terminal
                     )
                     Popen(command, shell=True)

     def test_spam_go_workspace_set_focus(self):
         for view_id in random_views:
-            self.logger.info(f"go_workspace_set_focus: {view_id}")
+            self.logger.info(f"go_workspace_set_focus: {view_id} [macro_id=GO_WORKSPACE_SET_FOCUS]")
             self.utils.go_workspace_set_focus(view_id)

     def test_wayfire(self, number_of_views_to_open, max_tries=1, speed=0, plugin=None, display=None):
         iterations = 0
         self.test_spam_terminals(number_of_views_to_open, wayland_display=display)
+
         # Start spamming views
         thread = threading.Thread(target=spam_new_views)
         thread.start()
         thread = threading.Thread(target=spam_new_dialogs)
         thread.start()

         while iterations < max_tries:
             try:
                 random_function, args = choice(functions)
                 random_function(*args)
                 iterations += 1
-                self.random_delay_next_tx()
+                self.logger.info("delay_next_tx [macro_id=DELAY_NEXT_TX]")
+                self.random_delay_next_tx()
